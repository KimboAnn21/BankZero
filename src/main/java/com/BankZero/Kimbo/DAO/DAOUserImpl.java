package com.BankZero.Kimbo.DAO;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;

import com.Connection.PostgreSQL.PostgreSQLConnection;
import com.BankZero.Kimbo.DAO.DAOUserImpl;
import com.BankZero.Kimbo.DAO.DAOUser;
import com.BankZero.Kimbo.BankingException;
import com.BankZero.Kimbo.Model.User;
import com.BankZero.Kimbo.Model.UserCredentials;

public abstract class DAOUserImpl implements DAOUser{

	// This method takes in a UserCredentials object and passes it through the register_User procedure to 
	// create a new user account with a sequentially generated account number 
	

	public DAOUserImpl() {
	}
	
	public void UserCredentials() {
	}
	
//	@Override
	public DAOUserImpl(UserCredentials uDetails) throws BankingException {
		
		try (Connection connection = PostgreSQLConnection.getConnection()){
			
			String sql = "{call register_User(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
			
			CallableStatement callableStatement = connection.prepareCall(sql);
			
			callableStatement.setString(2, uDetails.getUserName());
			callableStatement.setString(3, uDetails.getPassWord());
			callableStatement.setInt(4,  uDetails.getPin());
			callableStatement.setString(5,  uDetails.getFirstName());
			callableStatement.setString(6,  uDetails.getLastName());
			callableStatement.setString(7, uDetails.getContact());
			callableStatement.setString(8,  uDetails.getEmail());
			callableStatement.registerOutParameter(1, java.sql.Types.NUMERIC);
			
			callableStatement.execute();
			uDetails.setAcctId(callableStatement.getInt(1));
		
		} catch(SQLIntegrityConstraintViolationException e) {
			
			throw new BankingException("Email account is already registered, please use another one. If you feel you "
					+ "have reached this message in error, please contact customer service");
			
		} catch (ClassNotFoundException | SQLException e) {
			System.out.println(e);
			throw new BankingException("Internal error occured");
		} 
		
		return;
	}

	@Override
	public boolean checkUnique(UserCredentials uDetails) throws BankingException {
		
		try(Connection connection = PostgreSQLConnection.getConnection()) {
				String sql = "SELECT * FROM user_info where email = ?";
				PreparedStatement preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setString(1, uDetails.getEmail());
				ResultSet resultSet = preparedStatement.executeQuery();
				
	//Fix resultSet call resultSet.equals(uDetails) also include (resultSet.next())!!
				
				if (resultSet.equals(uDetails)) {
					return true;
				}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BankingException("Email is already registered...Please try again");
		}
		
		return false;
	}

	// Takes in a user object that is partially generated by the user attempting to log in, if the credentials match an existing user,
	// the rest of the object is retrieved from the DB and passed back, allowing the user to access account features within the main
	// menu
	@Override
	public User authUser(User user) throws BankingException {
		System.out.println("Dao reached: " + user);
		try(Connection connection = PostgreSQLConnection.getConnection()) {
			String sql = "SELECT acct_id, pin FROM users WHERE username = ? AND password = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, user.getUserName());
			preparedStatement.setString(2, user.getPassWord());
			ResultSet resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				user.setAcctId(resultSet.getLong("acct_id"));
				user.setPin(resultSet.getInt("pin"));
			} else {
				System.out.println("User not found");
			}
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		System.out.println(user);
		return user;
	}


//	@Override
//	public displayDetails(long userID) throws BankingException {
//		UserCredentials uDetails = new UserCredentials(userID, null, null, 0, null, null, null, null);
//		try(Connection connection = PostgreSQLConnection.getConnection()) {
//			String sql = "SELECT * FROM user_info where user_id = ?";
//			PreparedStatement preparedStatement = connection.prepareStatement(sql);
//			preparedStatement.setLong(1, userID);
//			ResultSet resultSet = preparedStatement.executeQuery();
//			if (resultSet.next()) {
//				uDetails.setAcctId(userID);
//				uDetails.setFirstName(resultSet.getString("first_name"));
//				uDetails.setLastName(resultSet.getString("last_name"));
//				uDetails.setContact(resultSet.getString("contact"));
//				uDetails.setEmail(resultSet.getString("email"));
//			}
//		} catch (ClassNotFoundException | SQLException e) {
//			throw new BankingException("Internal error occured...Please try again later");
//		}
//		return uDetails;
//	}

	@Override
	public boolean resetPassword(UserCredentials uDetails) throws BankingException {
		boolean b = false;
		System.out.println(uDetails);
		try(Connection connection = PostgreSQLConnection.getConnection()) {
			String sql = "Select *  FROM user_info where email = ? and sq = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, uDetails.getEmail());
			preparedStatement.setString(2, uDetails.getPassWord());
			ResultSet resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				System.out.println("User found");
				sql = "UPDATE users SET password = ? WHERE username = ? ";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setString(1, uDetails.getPassWord());
				preparedStatement.setString(2, uDetails.getEmail());
				int update = preparedStatement.executeUpdate();
				System.out.println(update);
				} 
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
				throw new BankingException("Internal error occured...Please try again later");
			}
		return b;
	}

	public User authAdminUser(User user) {
		System.out.println("Admin Dao reached: " + user);
		try(Connection connection = PostgreSQLConnection.getConnection()) {
			String sql = "SELECT adminId FROM admins WHERE username = ? AND password = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, user.getUserName());
			preparedStatement.setString(2, user.getPassWord());
			ResultSet resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				user.setAcctId(resultSet.getLong("adminId"));
			} else {
				System.out.println("User not found");
			}
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		System.out.println(user);
		return user;
	}

	@Override
	public UserCredentials registerDetails(UserCredentials uDetails) throws BankingException {
		// TODO Auto-generated method stub
		return null;
	}

//	@Override
//	public UserCredentials displayDetails(long userID) throws BankingException {
//		// TODO Auto-generated method stub
//		return null;
//	}

//	@Override
//	public boolean checkUnique(UserCredentials udetails) throws BankingException {
//		// TODO Auto-generated method stub
//		return false;
//	}

//	public boolean resetPassword(UserCredentials uDetails) {
//		// TODO Auto-generated method stub
//		return false;
//	}

//	@Override
//	public UserCredentials registerDetails1(UserCredentials uDetails) throws BankingException {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public boolean checkUnique1(UserCredentials uDetails) throws BankingException {
//		// TODO Auto-generated method stub
//		return false;
//	}
//
//	@Override
//	public UserCredentials displayDetails1(long userID) throws BankingException {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public boolean resetPassword1(UserCredentials uDetails) throws BankingException {
//		// TODO Auto-generated method stub
//		return false;
//	}

}
